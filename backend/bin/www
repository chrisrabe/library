#!/usr/bin/env node

require('dotenv').config(); // load .env file
const app = require('../app');
const http = require('http');

/**
 * Normalise port into a number, string or false
 * @param val
 * @return {*}
 */
const normalisePort = val => {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
};

/**
 * Event listener for HTTP server error events
 * @param error
 */
const onError = error => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(`${bind} requires elevated privileges`);
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(`${bind} is already in use`);
    process.exit(1);
    break;
  default:
    throw error;
  }
};

/**
 * Event listener for HTTP server listening event
 */
const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  const message = `Listening on ${bind}`;
  console.log(message);
};

// get port from environment or store in express
const port = normalisePort(process.env.PORT || '8080');
app.set('port', port);

// create HTTP server
const server = http.createServer(app);

// listen on provided port, on all network interfaces
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
